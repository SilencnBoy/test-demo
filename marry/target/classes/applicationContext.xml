<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- 1.spring托管配置文件 -->
	<util:properties location="classpath:jdbc-config.properties" id="jdbcConfig" />

	<!-- 2.配置数据库数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 配置数据源基本连接 -->
		<property name="url" value="#{jdbcConfig.url}" />
		<property name="driverClassName" value="#{jdbcConfig.driver}" />
		<property name="username" value="#{jdbcConfig.username}" />
		<property name="password" value="#{jdbcConfig.password}" />
		<property name="initialSize" value="#{jdbcConfig.initialSize}" />
		<property name="maxActive" value="#{jdbcConfig.maxActive}" />
		<property name="minIdle" value="#{jdbcConfig.minIdle}" />
		<property name="maxWait" value="#{jdbcConfig.maxWait}" />
	</bean>

	<!-- 3.配置会话工厂 -->
	<bean id="SessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定mybatis别名扫描 -->
		<property name="typeAliasesPackage" value="com.xul.entity" />
		<!-- 扫描映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/xul/mapper/*.xml</value>
			</list>
		</property>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!--依赖spring task 任务开启这个配置，spring才能识别@Scheduled注解 -->
	<!-- <task:annotation-driven scheduler="qbScheduler" mode="proxy"/> <task:scheduler 
		id="qbScheduler" pool-size="10"/> -->

	<!-- 4.配置映射扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置查询映射接口基础包 -->
		<property name="basePackage" value="com.xul.dao" />
		<!-- 配置SQLSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="SessionFactory" />
	</bean>

	<!-- spring托管事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 开启缓存注解驱动ehcache -->
	<cache:annotation-driven/>
	 
	<!-- 
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"> 
		<property name="cacheManager" ref="ehcache"/> 
	</bean> 
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> 
		<property name="configLocation" value="classpath:ehcache-setting.xml"/>
	</bean>
	 -->
	
	<!-- 配置redis连接池 JedisPoolConfig -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="300" />
		<property name="maxTotal" value="600" />
	</bean>

	<!-- 配置CoonnectionFactory JedisConnectionFactory -->
	<bean id="connFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="127.0.0.1"/>
		<property name="port" value="6379"/>
		<property name="poolConfig" ref="poolConfig"/>
	</bean>

	<!-- 配置redisTemplate StringRedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connFactory" />
	</bean>
	
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="com.xul.util.RedisUtil">
					<property name="redisTemplate" ref="redisTemplate" />
					<property name="name" value="commom" />
					<!-- User名称要在类或方法的注解中使用 -->
				</bean>
			</set>
		</property>
	</bean>
	
	<!-- 配置权限管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- ref对应我们写的realm  MyShiro -->
        <property name="realm" ref="myShiro" />
        <!-- 使用下面配置的缓存管理器 -->
        <property name="cacheManager" ref="MemoryConstrainedCacheManager" />
    </bean>
	
	 <bean id="myShiro" class="com.xul.util.MyShiroUitl"></bean>

    <!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 调用我们配置的权限管理器 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 配置我们的登录请求地址 -->
        <property name="loginUrl" value="/login.jsp" />
        <!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->
        <property name="successUrl" value="/index.jsp" />
        <!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->
        <property name="unauthorizedUrl" value="/403.jsp" />
        <!-- 权限配置 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon表示此地址不需要任何权限即可访问 -->
                /login=anon
                /logout=anon
                <!-- /*.* = authc -->
            </value>
        </property>
    </bean>
    <bean id="MemoryConstrainedCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	
	<!-- spring托管事务：spring对JDBC事务的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- spring aop注解版 -->
	<aop:aspectj-autoproxy/>
	<!-- 配置版<aop:config>  
	    <aop:aspect id="logAspect" ref="aspectLog">  
	        <aop:pointcut id="jLog" expression="execution(* com.xul.service.impl.*Imp.*(..))" />  
	        <aop:before pointcut-ref="jLog" method="doLog" />  
	        <aop:after-throwing pointcut-ref="jLog" method="doThrowing" throwing="ex"   
	        />  
	    </aop:aspect>  
	</aop:config>  
	-->
	<bean id="aspectLog" class="com.xul.log.MyLog" />
	  
	<!--开启注解驱动 -->
	<context:annotation-config />
	<context:component-scan base-package="com.xul" />


</beans>
